---
# Source: dify/charts/mysql/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: dify-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: dify
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mysql
      app.kubernetes.io/version: 8.4.2
      helm.sh/chart: mysql-11.1.17
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow connection from other cluster pods
    - ports:
        - port: 3306
---
# Source: dify/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: dify-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.5
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: dify
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: dify/charts/mysql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: dify-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: dify
      app.kubernetes.io/name: mysql
      app.kubernetes.io/component: primary
---
# Source: dify/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dify-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
automountServiceAccountToken: false
secrets:
  - name: dify-mysql
---
# Source: dify/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: dify-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.5
---
# Source: dify/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dify
  labels:
    helm.sh/chart: dify-0.0.1
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/version: "0.6.11"
    app.kubernetes.io/managed-by: Helm
---
# Source: dify/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dify-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
type: Opaque
data:
  mysql-root-password: "dGVzdHBhc3N3b3Jk"
  mysql-password: "dGVzdHBhc3N3b3Jk"
---
# Source: dify/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dify-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.5
type: Opaque
data:
  redis-password: "UkVESVNfUEFTU1dPUkQ="
---
# Source: dify/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dify-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    authentication_policy='* ,,'
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    mysqlx=0
    mysqlx_port=33060
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    slow_query_log=0
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: dify/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dify-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.5
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: dify/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dify-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.5
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: dify/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dify-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.5
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: dify/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dify-sandbox-config
data:
  python-requirements.txt: |
---
# Source: dify/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: dify-mysql-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: dify/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: dify-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: dify/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: dify-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.5
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/name: redis
---
# Source: dify/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dify-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.5
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: dify/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  # dify-api would confict with dify-api program
  # use another name
  name: dify-api-svc
  labels:
    helm.sh/chart: dify-0.0.1
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/version: "0.6.11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/component: api
---
# Source: dify/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dify-frontend
  labels:
    helm.sh/chart: dify-0.0.1
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/version: "0.6.11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/component: frontend
---
# Source: dify/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dify-sandbox
  labels:
    helm.sh/chart: dify-0.0.1
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/version: "0.6.11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: sandbox
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/component: sandbox
---
# Source: dify/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dify-api
  labels:
    helm.sh/chart: dify-0.0.1
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/version: "0.6.11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dify
      app.kubernetes.io/instance: dify
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dify
        app.kubernetes.io/instance: dify
        app.kubernetes.io/component: api
        
    spec:
      serviceAccountName: dify
      securityContext:
        {}
      containers:
        - name: dify-api
          securityContext:
            {}
          image: "thomaszy2077/dify:1.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: MODE
              value: "api"
            - name: EDITION
              value: SELF_HOSTED
            - name: CONSOLE_API_URL
              value: http://chart-example.local
            - name: CONSOLE_WEB_URL
              value: http://chart-example.local
            - name: SERVICE_API_URL
              value: http://chart-example.local
            - name: APP_API_URL
              value: http://chart-example.local
            - name: APP_WEB_URL
              value: http://chart-example.local
            - name: STORAGE_TYPE
              value: s3
            - name: CELERY_BROKER_URL
              value: redis://:REDIS_PASSWORD@dify-redis-master:6379/1
            - name: REDIS_HOST
              value: dify-redis-master
            - name: REDIS_DB
              value: "1"
            - name: REDIS_PASSWORD
              value: REDIS_PASSWORD
            - name: DB_USERNAME
              value: "dify"
            - name: DB_PASSWORD
              value: "testpassword"
            - name: DB_HOST
              value: dify-mysql
            - name: DB_PORT
              value: "3306"
            - name: DB_DATABASE
              value: dify
            - name: SECRET_KEY
              value: PleaseReplaceThisToYourSecretOrUse
            - name: CODE_MAX_NUMBER
              value: "9223372036854775807"
            - name: CODE_MIN_NUMBER
              value: "-9223372036854775808"
            - name: CODE_MAX_STRING_LENGTH
              value: "80000"
            - name: TEMPLATE_TRANSFORM_MAX_LENGTH
              value: "80000"
            - name: CODE_MAX_STRING_ARRAY_LENGTH
              value: "30"
            - name: CODE_MAX_OBJECT_ARRAY_LENGTH
              value: "30"
            - name: CODE_MAX_NUMBER_ARRAY_LENGTH
              value: "1000"
            - name: CODE_EXECUTION_ENDPOINT
              value: "http://dify-sandbox"
            - name: CODE_EXECUTION_API_KEY
              value: "dify-sandbox"
          ports:
            - name: http
              containerPort: 5001
              protocol: TCP
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            {}

# worker
---
# Source: dify/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dify-worker
  labels:
    helm.sh/chart: dify-0.0.1
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/version: "0.6.11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dify
      app.kubernetes.io/instance: dify
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dify
        app.kubernetes.io/instance: dify
        app.kubernetes.io/component: worker
        
    spec:
      serviceAccountName: dify
      securityContext:
        {}
      containers:
        - name: dify
          securityContext:
            {}
          image: "langgenius/dify-api:0.6.11"
          imagePullPolicy: IfNotPresent
          args:
          - worker
          env:
            - name: MODE
              value: "worker"
            - name: EDITION
              value: SELF_HOSTED
            - name: CONSOLE_API_URL
              value: http://chart-example.local
            - name: CONSOLE_WEB_URL
              value: http://chart-example.local
            - name: SERVICE_API_URL
              value: http://chart-example.local
            - name: APP_API_URL
              value: http://chart-example.local
            - name: APP_WEB_URL
              value: http://chart-example.local
            - name: STORAGE_TYPE
              value: s3
            - name: CELERY_BROKER_URL
              value: redis://:REDIS_PASSWORD@dify-redis-master:6379/1
            - name: REDIS_HOST
              value: dify-redis-master
            - name: REDIS_DB
              value: "1"
            - name: REDIS_PASSWORD
              value: REDIS_PASSWORD
            - name: DB_USERNAME
              value: "dify"
            - name: DB_PASSWORD
              value: "testpassword"
            - name: DB_HOST
              value: dify-mysql
            - name: DB_PORT
              value: "3306"
            - name: DB_DATABASE
              value: dify
            - name: SECRET_KEY
              value: PleaseReplaceThisToYourSecretOrUse
          resources:
            {}

# frontend
---
# Source: dify/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dify-frontend
  labels:
    helm.sh/chart: dify-0.0.1
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/version: "0.6.11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dify
      app.kubernetes.io/instance: dify
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dify
        app.kubernetes.io/instance: dify
        app.kubernetes.io/component: frontend
        
    spec:
      serviceAccountName: dify
      securityContext:
        {}
      containers:
        - name: dify
          securityContext:
            {}
          image: "langgenius/dify-web:0.6.11"
          imagePullPolicy: IfNotPresent
          env:
            - name: EDITION
              value: SELF_HOSTED
            - name: CONSOLE_API_URL
              value: http://chart-example.local
            - name: CONSOLE_WEB_URL
              value: http://chart-example.local
            - name: SERVICE_API_URL
              value: http://chart-example.local
            - name: APP_API_URL
              value: http://chart-example.local
            - name: APP_WEB_URL
              value: http://chart-example.local
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            failureThreshold: 2
            httpGet:
              httpHeaders:
              - name: accept-language
                value: en
              path: /apps
              port: http
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              httpHeaders:
              - name: accept-language
                value: en
              path: /apps
              port: http
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            {}


# sandbox
---
# Source: dify/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dify-sandbox
  labels:
    helm.sh/chart: dify-0.0.1
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/version: "0.6.11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: sandbox
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dify
      app.kubernetes.io/instance: dify
      app.kubernetes.io/component: sandbox
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dify
        app.kubernetes.io/instance: dify
        app.kubernetes.io/component: sandbox
        
    spec:
      serviceAccountName: dify
      securityContext:
        {}
      containers:
        - name: dify
          securityContext:
            {}
          image: "langgenius/dify-sandbox:0.2.0"
          imagePullPolicy: IfNotPresent
          env:
          - name: PLACEHOLDER
            value: "PLACEHOLDER"
          - name: GIN_MODE
            value: release
          - name: WORKER_TIMEOUT
            value: "15"
          - name: API_KEY
            value: "dify-sandbox"
          volumeMounts:
            - name: config-volume
              mountPath: /dependencies
          ports:
            - name: http
              containerPort: 8194
              protocol: TCP
          livenessProbe:
            failureThreshold: 2
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            tcpSocket:
              port: http
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 10
            initialDelaySeconds: 1
            periodSeconds: 5
            successThreshold: 1
            tcpSocket:
              port: http
            timeoutSeconds: 5
          resources:
            {}
      volumes:
        - name: config-volume
          configMap:
            name: dify-sandbox-config
---
# Source: dify/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dify-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/instance: dify
      app.kubernetes.io/name: mysql
      app.kubernetes.io/component: primary
  serviceName: dify-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: c8c21bf194c0683c2021d441bbe8b858bf1b18699de74293e6c8ee5862debc56
      labels:
        app.kubernetes.io/instance: dify
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        app.kubernetes.io/version: 8.4.2
        helm.sh/chart: mysql-11.1.17
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: dify-mysql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: dify
                    app.kubernetes.io/name: mysql
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/mysql:8.4.2-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/mysql/logs; then
                cp -r /opt/bitnami/mysql/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.4.2-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dify-mysql
                  key: mysql-root-password
            - name: MYSQL_USER
              value: "dify"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dify-mysql
                  key: mysql-password
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "dify"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/logs
              subPath: app-logs-dir
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: dify-mysql
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: dify
          app.kubernetes.io/name: mysql
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: dify/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dify-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: dify
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.5
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: dify
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: dify-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: dify
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-19.1.5
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5
        checksum/secret: 8f2033f08665cc106e3d23620e1196022786e7a39a3b825157aee73f0349f50d
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: dify-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: dify
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.4-debian-12-r13
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dify-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: dify-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: dify-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: dify-redis-configuration
        - name: empty-dir
          emptyDir: {}
        - name: redis-data
          emptyDir: {}
---
# Source: dify/templates/deployment.yaml
# api
---
# Source: dify/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "dify-test-connection"
  labels:
    helm.sh/chart: dify-0.0.1
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: dify
    app.kubernetes.io/version: "0.6.11"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['dify-api:80']
  restartPolicy: Never
